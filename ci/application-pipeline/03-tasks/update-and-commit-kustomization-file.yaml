apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-and-commit-kustomization-file
spec:
  params:
  - name: GIT_URL
    type: string
  - name: GIT_REPO_NAME
    type: string
  - name: GIT_BRANCH
    type: string
    default: ""
  - name: GIT_PR_TARGET_BRANCH
    type: string
    default: ""
  - name: GIT_PATH_TO_CONTENT
    type: string
    default: ""
  - name: GIT_USER_NAME
    type: string
  - name: GIT_USER_EMAIL
    type: string
  - name: GIT_COMMIT_COMMENT
    type: string
  - name: IMAGE
    type: string
  - name: LOCATION
    type: string
  results:
    - name: commit-id
  steps:
    - name: update-ops-repo-with-imagetag
      env:
        - name: GITHOSTACCESSTOKEN
          valueFrom:
            secretKeyRef:
              key: "token"
              name: "github-access-token"
        - name: GPGKEYPASSPHRASE
          valueFrom:
            secretKeyRef:
              key: "tokepassphrasen"
              name: "gpg-secret-key-passphrase"
  
      image: image-registry.openshift-image-registry.svc:5000/secure-pipeline-ci/terminal:latest
# Changes for skylake
      securityContext:
        capabilities:
          add: ["SETFCAP"]
      script: >
        #!/bin/sh

        echo "Git URL : " $(params.GIT_URL)".git"

        echo "Git Repo name : " $(params.GIT_REPO_NAME)

        echo "Git branch for change : " $(params.GIT_BRANCH)

        echo "Git branch target for pull request : " $(params.GIT_PR_TARGET_BRANCH)

        echo "Path to content in git repo : " $(params.GIT_PATH_TO_CONTENT)

        echo "Username for git changes : " $(params.GIT_USER_NAME)

        echo "Email address for git changes : " $(params.GIT_USER_EMAIL)

        echo "Git commit comment : " $(params.GIT_COMMIT_COMMENT)

        echo "Image URL to be patched : " $(params.IMAGE)

        cd /workspace/files

        mkdir $(params.LOCATION)

        cd $(params.LOCATION)

        pwd

        git config --global user.email $(params.GIT_USER_EMAIL)

        git config --global user.name $(params.GIT_USER_NAME)

        gpg --import /workspace/gpg-key-secret/public.key
 
        gpg --import --pinentry-mode=loopback --passphrase  ${GPGKEYPASSPHRASE} /workspace/gpg-sig-secret-secret/my-key.asc

        gpg --list-signatures

        gpg -K

        echo "--"

        gpg --list-signatures | tail -n 2 | awk '{split($0,a," "); print a[2]}'

        git config --global user.signingkey $(gpg --list-signatures | tail -n 2 | awk '{split($0,a," "); print a[2]}')

        git config --global commit.gpgsign true

        ls /usr/bin/gpg

        git config --global gpg.program /usr/bin/gpg

        ls -alR

        git clone https://${GITHOSTACCESSTOKEN}@$(params.GIT_URL).git

        echo "-----------------------------------------------------------------"

        echo "view content of directory"

        echo "-----------------------------------------------------------------"

        cd /workspace/files/$(params.LOCATION)/$(params.GIT_REPO_NAME)/$(params.GIT_PATH_TO_CONTENT)

        ls -al

        echo "-----------------------------------------------------------------"

        echo "Select branch"

        git checkout $(params.GIT_BRANCH)

        echo "-----------------------------------------------------------------"

        echo "File before change"

        echo "-----------------------------------------------------------------"

        cat kustomization.yaml

        kustomize edit set image $(params.IMAGE)

        echo "-----------------------------------------------------------------"

        echo "File after change"

        echo "-----------------------------------------------------------------"

        cat kustomization.yaml

        git add .

        gpg --list-signatures

        git commit -m "$(params.GIT_COMMIT_COMMENT)" --gpg-sign=$(gpg --list-signatures | tail -n 2 | awk '{split($0,a," "); print a[2]}')

        echo "-----------------------------------------------------------------"

        git push -u

        git rev-parse HEAD > $(results.commit-id.path)

        cat $(results.commit-id.path)

        if [ -z "$(params.GIT_PR_TARGET_BRANCH)" ]

        then

          echo "Pull request is not required"

        else

          echo "-----------------------------------------------------------------"

          echo "Create pull request"

          echo "-----------------------------------------------------------------"

          echo $GITHOSTACCESSTOKEN > gh-token.txt

          gh auth login --with-token < gh-token.txt

          rm -rf gh-token.txt

          gh pr create --fill --head $(params.GIT_BRANCH) --base $(params.GIT_PR_TARGET_BRANCH)

        fi

  workspaces:
    - name: files
    - name: secrets
